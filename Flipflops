//behavioral sr 
module SR_flipfop(output reg q,qb,input s,r,clk); 
initial 
begin q=1&#39;b0;qb=1&#39;b1; 
end 
always @(posedge clk) 
begin 
if(s==1&#39;b0 &amp;&amp; r==1&#39;b0) 
begin 
q=q;qb=qb; 
end 
else if(s==1&#39;b0 &amp;&amp; r==1&#39;b1) 
begin 
q=1&#39;b0;qb=1&#39;b1; 
end 
else if(s==1&#39;b1 &amp;&amp; r==1&#39;b0) 
begin 
q=1&#39;b1;qb=1&#39;b0; 
end 
else 
begin 
q=1&#39;bx;qb=1&#39;bx; 
end 
end 
endmodule 
//testbench 
module tb_SR_flipflop; 
reg s, r, clk; 
wire q, qb; 
SR_flipfop uut (q,qb,s,r,clk); 
initial 
clk=1&#39;b0; 
always #5 
clk=~clk; 
initial 
begin 
s=1&#39;b0; 
r=1&#39;b0; 
#10 
s=0;r=0; 
#10 
s =0;r=1; 
#10 
s =1;r=0; 
#10 
s =1;r=1; 
#10 
s=0;r=0; 
#10 
#80 
$finish; 
end 
Endmodule 
//jk flipflop 
module jk_flipflop(output reg q,qb,input j,k,clk); 
initial 
begin 
q = 1&#39;b0; 
qb = 1&#39;b1; 
end 
always @(posedge clk) 
begin 
if (j==1&#39;b0 &amp;&amp; k==1&#39;b0) 
begin 
q = q;qb = qb; 
end 
else if (j==1&#39;b0 &amp;&amp; k==1&#39;b1) 
begin 
q = 1&#39;b0;qb = 1&#39;b1; 
end 
else if (j==1&#39;b1 &amp;&amp; k==1&#39;b0) 
begin 
q = 1&#39;b1;qb = 1&#39;b0; 
end 
else 
begin 
q = ~q;qb = ~qb; 
end 
end 
Endmodule 
//testbench 
module tb_jk_flipflop; 
reg j, k, clk; 
wire q, qb; 
jk_flipflop uut (q, qb, j, k, clk); 
initial begin 
clk = 1&#39;b0; 
end 
always #5 clk = ~clk; 
initial begin 
j = 1&#39;b0; k = 1&#39;b0; 
#10; 
j = 1&#39;b0; k = 1&#39;b0; 
#10; 
j = 1&#39;b0; k = 1&#39;b1; 
#10; 
j = 1&#39;b1; k = 1&#39;b0; 
#10; 
j = 1&#39;b1; k = 1&#39;b1; 
#10; 
j = 1&#39;b0; k = 1&#39;b0; 
#80; 
$finish; 
end 
endmodule 
//behavioral d 
module d_flipflop(output reg q,qb,input d,clk); 
initial 
begin 
q = 1&#39;b0; 
qb = 1&#39;b1; 
end 
always @(posedge clk) 
begin 
q = d; 
qb = ~d; 
end 
endmodule 
//testbench 
module tb_d_flipflop; 
reg d, clk; 
wire q, qb; 
d_flipflop uut (q, qb, d, clk); 
initial 
begin 
clk = 1&#39;b0; 
end 
always #5 
clk = ~clk; 
initial 
begin 
d = 1&#39;b0; 
#10; 
d = 1&#39;b1; 
#10; 
$finish; 
end 
Endmodule 
//tflipflop 
module t_flipflop(output reg q,qb,input t,clk); 
initial 
begin 
q = 1&#39;b0; 
qb = 1&#39;b1; 
end 
always @(posedge clk) begin 
if (t==1&#39;b0) begin 
q = q; 
qb = qb; 
end 
else 
begin 
q=~q; 
qb=~qb; 
end 
end 
endmodule 
//testbench 
module tb_t_flipflop; 
reg t, clk; 
wire q, qb; 
t_flipflop uut (q, qb, t, clk); 
initial 
begin 
clk = 1&#39;b0; 
end 
always #5 clk = ~clk; 
initial 
begin 
t = 1&#39;b0; 
#10; 
t = 1&#39;b1; 
#10; 
$finish; 
end 
endmodule
