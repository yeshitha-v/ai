module decoder_2_to_4_gl(output q0,q1,q2,q3,input a,b,input en); 
wire a_bar,b_bar; 
not a1(a_bar,a); 
not a2(b_bar,b); 
and a3(q0,en,a_bar,b_bar); 
and a4(q1,en,a_bar,b); 
and a5(q2,en,a,b_bar); 
and a6(q3,en,a,b); 
endmodule 
//test bench 
module decoder_2_to_4_tb; 
reg a,b,en; 
wire q0,q1,q2,q3; 
//decoder_2_to_4_gl uut(q0,q1,q2,q3,a,b,en); 
//decoder_2_to_4_df uut(q0,q1,q2,q3,a,b,en); 
decoder_2_to_4_bm uut(q0,q1,q2,q3,a,b,en); 
initial 
begin 
en=0;a=1'bx;b=1'bx; 
#10 
en=1;a=1'b0;b=1'b0; 
#10 
en=1;a=1'b0;b=1'b1; 
#10 
en=1;a=1'b1;b=1'b0; 
#10 
en=1;a=1'b1;b=1'b1; 
end 
initial 
#60 
$stop; 
endmodule 
//data flow 
module decoder_2_to_4_df(output q0,q1,q2,q3,input a,b,input en); 
wire a_bar,b_bar; 
assign a_bar=~a; 
assign b_bar=~b; 
assign q0=en*a_bar*b_bar; 
assign q1=en*a_bar*b; 
assign q2=en*a*b_bar; 
assign q3=en*a*b; 
endmodule 
//behavioural model 
module decoder_2_to_4_bm(output reg q0,q1,q2,q3,input a,b,input en); 
always @(a,b,en) 
begin 
if(en)begin 
q0=~a&~b; 
q1=~a&b; 
q2=a&~b; 
q3=a&b; 
end 
end 
endmodule
