 module mux_8x1_bh( 
    output reg y, 
    input [7:0]i, 
 input [2:0]s 
    ); 
    
    always @(*) 
    begin 
    case(s) 
        3'b000:y=i[0]; 
        3'b001:y=i[1]; 
        3'b010:y=i[2]; 
        3'b011:y=i[3]; 
        3'b100:y=i[4]; 
        3'b101:y=i[5]; 
        3'b110:y=i[6]; 
        3'b111:y=i[7]; 
    endcase 
    end 
endmodule 
 
//test bench 
module mux8x1_tb; 
    reg [7:0] i;   
    reg [2:0] s;   
    wire y;   
    mux_8x1_bh uut (.i(i),.s(s),.y(y)); 
    initial begin 
        i = 8'b10101010;   
        s = 3'b000; #10;   
        s = 3'b001; #10;   
        s = 3'b010; #10; 
        s = 3'b011; #10;   
        s = 3'b100; #10;   
        s = 3'b101; #10;   
        s = 3'b110; #10;   
        s = 3'b111; #10;   
        $finish; 
    end 
 
    initial begin 
        $monitor("i=%b | s=%b | y=%b",i, s, y); 
    end 
endmodule 
 
1 to 8 de mux 
 
module demux_1_to_8( 
    input wire d,         
    input wire [2:0] s,   
    output reg [7:0] y     
); 
 
always @(*) begin 
    y = 8'b00000000;   
    y[s] = d;         
end 
 
endmodule 
 
//testbench 
 
module tb_demux_1x8; 
 
    reg d; 
    reg [2:0] s; 
    wire [7:0] y; 
 
    
    demux_1x8 uut ( 
        .d(d), 
        .s(s), 
        .y(y) 
    );
