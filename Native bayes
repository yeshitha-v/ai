
mport pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, precision_score, recall_score

# 1. Load dataset
df = pd.read_csv('text_data.csv')  # Make sure this file exists in the same folder

# 2. Split into features (X) and labels (y)
X = df['text']
y = df['label']

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 4. Convert text to bag-of-words
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# 5. Train Naive Bayes model
model = MultinomialNB()
model.fit(X_train_vec, y_train)

# 6. Predict on test data
y_pred = model.predict(X_test_vec)

# 7. Evaluate model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print("Model Evaluation:")
print("-----------------")
print("Accuracy :", round(accuracy, 2))
print("Precision:", round(precision, 2))
print("Recall   :", round(recall, 2))
print("\nSentence-wise Predictions:")
print("---------------------------")

# 8. Print each test sentence with its predicted sentiment
for text, pred in zip(X_test, y_pred):
    sentiment = "Positive ðŸ˜Š" if pred == 1 else "Negative ðŸ˜ž"
    print(f"'{text}' â†’ {sentiment}")
