BCD counter 

module bcd_counter(output reg [3:0]Q, input reset,clk,modeselect); 
always@(posedge clk) 
begin 
if (reset) 
Q=4'b0000; 
else if(modeselect==1'b0) 
begin 
if(Q==4'b1001) 
Q=4'b0000; 
else 
Q=Q+1; 
end 
else if(modeselect==1'b1) 
begin 
if(Q==4'b0000) 
Q=4'b1001; 
else 
Q=Q-1; 
end 
end 
endmodule 
//testbench 
module bcd_counter_tb; 
reg reset,clk,modeselect; 
wire [3:0]Q; 
counter_syn uut(Q,reset,clk,modeselect); 
initial 
begin 
reset=1'b1; 
#5 reset=1'b0; 
modeselect=1'b0; 
#35 modeselect=1'b1; 
#35 $stop; 
end 
initial 
clk=1'b0; 
always #2 clk=~clk; 
endmodule 
Binary counter 
module binary_counter(output reg [3:0]Q, input reset,clk,modeselect); 
always@(posedge clk) 
begin 
if (reset) 
Q=4'b0000; 
else if(modeselect==1'b0) 
begin 
if(Q==4'b1111) 
Q=4'b0000; 
else 
Q=Q+1; 
end 
else if(modeselect==1'b1) 
begin 
if(Q==4'b0000) 
Q=4'b1111; 
else 
Q=Q-1; 
end 
end 
endmodule 
//testbench 
module binary_counter_tb; 
reg reset,clk,modeselect; 
wire [3:0]Q; 
counter_syn uut(Q,reset,clk,modeselect); 
initial 
begin 
reset=1'b1; 
#5 reset=1'b0; 
modeselect=1'b0; 
#35 modeselect=1'b1; 
#35 $stop; 
end 
initial 
clk=1'b0; 
always #2 clk=~clk; 
endmodule
