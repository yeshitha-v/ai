GATE LEVEL
module B2G(
input[3:0]B,
output [3:0]G
    );
	 
buf (G[3], B[3]);
xor (G[2], B[3], B[2]);
xor (G[1], B[2], B[1]);
xor (G[0], B[1], B[0]);
end module

DATA FLOW
module B2G_df(B,G)

input[3:0]B,
output [3:0]G

assign G[3]=B[3];
G[2]=B[3]^ B[2];
G[1]=B[2]^ B[1];
G[0]=B[1]^ B[0];

endmodule


(i)Behavioral model:
module BinarytoGray_4(
    output [3:0]G,
    input [3:0] B
    );
	 
reg [3:0]G;

always @(B)
begin 
G[3] = B[3];
G[2] = B[3] ^ B[2];
G[1] = B[2] ^ B[1];
G[0] = B[1] ^ B[0];
end
endmodule

TEST BENCH

Module testbench-B2G
Reg[3:0]B;
Wire[3:0]G;
B2G_df.uut(B,G);
Initial
Begin
B=4’b0001;
#20
B=4’b0100;
#20
B=4’b1011;
#20
B=4’b1111
End
Initial
$monitor(g=%b”,g,b)
#200
$stop
end module

